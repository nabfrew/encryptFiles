package com.task;

import com.task.exceptions.CipherException;
import com.task.exceptions.InvalidArgumentException;

import java.io.IOException;
import java.util.List;

import static com.task.ArgumentParser.HELP_FLAG;
import static com.task.ArgumentParser.MODE_FLAG;
import static com.task.ArgumentParser.MODE_VALUE_DECRYPT;
import static com.task.ArgumentParser.MODE_VALUE_ENCRYPT;
import static com.task.ArgumentParser.Mode.HELP;
import static com.task.ArgumentParser.NAME_FLAG;
import static com.task.ArgumentParser.OUTPUT_DIRECTORY_FLAG;
import static com.task.ArgumentParser.PASSWORD_FLAG;

public class Main {

    public static void main(String[] args) {
        var argumentParser = new ArgumentParser(args);

        Command command;
        try {
            command = argumentParser.parse();
        } catch (InvalidArgumentException ex) {
            System.out.println(ex.getMessage());
            System.out.println(helpText());
            return;
        }

        if (command.getMode().equals(HELP)) {
            System.out.println(helpText());
            return;
        }
        System.out.println(command);
        try {
            command.execute();
        } catch (CipherException | IOException ex) {
            System.out.println("\nEncryption failed.\n" + ex.getMessage());
        }
    }

    private static String helpText() {
        return "Usage: encryptedArchive " + MODE_FLAG + " " + NAME_FLAG + " " + OUTPUT_DIRECTORY_FLAG + " <" + formatOptions(PASSWORD_FLAG) + "> FILEPATH...\n\n"
                + "Options:\n"
                + "\t" + formatOptions(PASSWORD_FLAG) + " (Required)\n\t\t Password for encryption/decryption.\n"
                + "\t" + formatOptions(MODE_FLAG) + " (Optional)\n"
                + "\t\t" + formatOptions(MODE_VALUE_ENCRYPT) + " (default): For packing files specified by FILEPATH into archive.\n"
                + "\t\t" + formatOptions(MODE_VALUE_DECRYPT) + ": For unpacking archives specified by FILEPATH.\n"
                + "\t" + formatOptions(NAME_FLAG) + " (Optional)\n\t\t Name of output archive.\n"
                + "\t\t\tDefault encrypt mode: Autogenerated UUID.\n"
                + "\t\t\tDefault decrypt mode: ignored, source filenames are used.\n"
                + "\t" + formatOptions(OUTPUT_DIRECTORY_FLAG) + " (Optional)\n\t\t The directory to place output in.\n"
                + "\t\t\tDefault encrypt mode: Present working directory.\n"
                + "\t\t\tDefault decrypt mode: `decrypted/[input file name]` child directory to present working directory.\n"
                + "\t" + formatOptions(HELP_FLAG) + "\n\t\tDisplay this message.";
    }

    private static String formatOptions(List<String> options) {
        return options.toString().replace("[", "").replace("]", "");
    }

    /*  (For the record, I'm aware code comments is not a good method of
        project planning in general. But it will do for small solo projects.)

    TODO / further work
        - Warn/reject/auto-rename in case of overwriting existing files?
            - Flag and/or prompt to override?
        - Roll back / delete output in case of failure.
        - Zip directories.
        - Make password optional, zip without encrypting?
        - Choice of algorithm?
        - More tests (always...)
     */
}
